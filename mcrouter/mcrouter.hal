# Generated by stepconf 1.1 at Sun Oct 27 20:12:41 2024
# If you make changes to this file, they will be
# overwritten when you run stepconf again
loadrt [KINS]KINEMATICS
loadrt [EMCMOT]EMCMOT base_period_nsec=[EMCMOT]BASE_PERIOD servo_period_nsec=[EMCMOT]SERVO_PERIOD num_joints=[KINS]JOINTS
loadrt hal_parport cfg="0 out"
setp parport.0.reset-time 5000
loadrt stepgen step_type=0,0,0

loadrt encoder names=step_increment
addf encoder.update-counters servo-thread
addf encoder.capture-position servo-thread
setp step_increment.counter-mode 1

loadrt wcomp names=step_increment_counter_should_reset
addf step_increment_counter_should_reset servo-thread
setp step_increment_counter_should_reset.min 3.5
setp step_increment_counter_should_reset.max 4.5

loadrt conv_s32_float names=step_increment_float
addf step_increment_float servo-thread
net reset-in_s32 step_increment.counts => step_increment_float.in
net reset-in step_increment_float.out => step_increment_counter_should_reset.in
net reset-out step_increment_counter_should_reset.out => step_increment.reset

loadrt conv_s32_u32 names=increment_counter_u32
addf increment_counter_u32 servo-thread
net reset-in_s32 => increment_counter_u32.in

loadrt bitslice names=increment_counter_bits personality=2
addf increment_counter_bits servo-thread
net increment_counter_bits_in increment_counter_u32.out => increment_counter_bits.in

loadrt mux4 names=increment_mux
addf increment_mux servo-thread
setp increment_mux.in0 5
setp increment_mux.in1 1
setp increment_mux.in2 0.1
setp increment_mux.in3 0.01
net increment_mux_bit0 increment_counter_bits.out-00 => increment_mux.sel0
net increment_mux_bit1 increment_counter_bits.out-01 => increment_mux.sel1
net jog-increment  <= increment_mux.out
net jog-increment => halui.axis.x.increment
net jog-increment => halui.axis.y.increment
net jog-increment => halui.axis.z.increment
setp halui.axis.jog-speed 100


# debounce
loadrt debounce cfg=1,1,1
addf debounce.0 base-thread
addf debounce.1 base-thread
addf debounce.2 base-thread
setp debounce.0.delay 15
setp debounce.1.delay 15
setp debounce.2.delay 15
net raw-both-home-x <= parport.0.pin-10-in-not
net raw-both-home-y <= parport.0.pin-11-in-not
net raw-both-home-z <= parport.0.pin-12-in-not
net raw-both-home-x => debounce.0.0.in
net raw-both-home-y => debounce.1.0.in
net raw-both-home-z => debounce.2.0.in
net both-home-x <= debounce.0.0.out
net both-home-y <= debounce.1.0.out
net both-home-z <= debounce.2.0.out
 
addf parport.0.read base-thread
addf stepgen.make-pulses base-thread
addf parport.0.write base-thread
addf parport.0.reset base-thread

addf stepgen.capture-position servo-thread
addf motion-command-handler servo-thread
addf motion-controller servo-thread
addf stepgen.update-freq servo-thread

net estop-out       => parport.0.pin-01-out
net xstep           => parport.0.pin-02-out
setp parport.0.pin-02-out-reset 1
net ydir            => parport.0.pin-03-out
net zstep           => parport.0.pin-07-out
setp parport.0.pin-07-out-reset 1
net zdir            => parport.0.pin-08-out
net xdir            => parport.0.pin-14-out
net ystep           => parport.0.pin-16-out
setp parport.0.pin-16-out-reset 1

setp stepgen.0.position-scale [JOINT_0]SCALE
setp stepgen.0.steplen 1
setp stepgen.0.stepspace 0
setp stepgen.0.dirhold 35000
setp stepgen.0.dirsetup 35000
setp stepgen.0.maxaccel [JOINT_0]STEPGEN_MAXACCEL
net xpos-cmd joint.0.motor-pos-cmd => stepgen.0.position-cmd
net xpos-fb stepgen.0.position-fb => joint.0.motor-pos-fb
net xstep <= stepgen.0.step
net xdir <= stepgen.0.dir
net xenable joint.0.amp-enable-out => stepgen.0.enable
net both-home-x => joint.0.home-sw-in
net both-home-x => joint.0.neg-lim-sw-in
net both-home-x => joint.0.pos-lim-sw-in

setp stepgen.1.position-scale [JOINT_1]SCALE
setp stepgen.1.steplen 1
setp stepgen.1.stepspace 0
setp stepgen.1.dirhold 35000
setp stepgen.1.dirsetup 35000
setp stepgen.1.maxaccel [JOINT_1]STEPGEN_MAXACCEL
net ypos-cmd joint.1.motor-pos-cmd => stepgen.1.position-cmd
net ypos-fb stepgen.1.position-fb => joint.1.motor-pos-fb
net ystep <= stepgen.1.step
net ydir <= stepgen.1.dir
net yenable joint.1.amp-enable-out => stepgen.1.enable
net both-home-y => joint.1.home-sw-in
net both-home-y => joint.1.neg-lim-sw-in
net both-home-y => joint.1.pos-lim-sw-in

setp stepgen.2.position-scale [JOINT_2]SCALE
setp stepgen.2.steplen 1
setp stepgen.2.stepspace 0
setp stepgen.2.dirhold 35000
setp stepgen.2.dirsetup 35000
setp stepgen.2.maxaccel [JOINT_2]STEPGEN_MAXACCEL
net zpos-cmd joint.2.motor-pos-cmd => stepgen.2.position-cmd
net zpos-fb stepgen.2.position-fb => joint.2.motor-pos-fb
net zstep <= stepgen.2.step
net zdir <= stepgen.2.dir
net zenable joint.2.amp-enable-out => stepgen.2.enable
net both-home-z => joint.2.home-sw-in
net both-home-z => joint.2.neg-lim-sw-in
net both-home-z => joint.2.pos-lim-sw-in

net estop-out <= iocontrol.0.user-enable-out
net estop-out => iocontrol.0.emc-enable-in

loadusr -W hal_manualtoolchange
net tool-change iocontrol.0.tool-change => hal_manualtoolchange.change
net tool-changed iocontrol.0.tool-changed <= hal_manualtoolchange.changed
net tool-number iocontrol.0.tool-prep-number => hal_manualtoolchange.number
net tool-prepare-loopback iocontrol.0.tool-prepare => iocontrol.0.tool-prepared

# Gamepad
loadusr -W hal_input -KRAL X-Box
# Left joystick jogs X/Y
net left-joy-x input.0.abs-x-position => halui.axis.x.analog
net left-joy-y input.0.abs-y-position => halui.axis.y.analog 
# Right joystick jogs Z
net right-joy-y input.0.abs-ry-position => halui.axis.z.analog

# TODO: 'halui.jog-deadband' (float, in) - deadband for analog jogging (smaller jogging speed requests are not performed)

# TODO
#- Increment jog (X, Y, Z) - Crosshair (XY), Left triggers (Z)
#	halui.jog.<n>.increment-minus (bit, in)
#	halui.jog.<n>.increment-plus (bit, in)
#- Increment size toggle - Mode button
#        halui.jog.<n>.increment' (float,in) - pin for setting the jog increment for axis <n> when using increment-minus or increment-plus to jog.
#	TODO: What to do with float
#- Home: Back button -
net btn-back input.0.btn-select => halui.home-all

#- Touch off (X, Y, Z): X, Y, B buttons
net btn-x input.0.btn-x => halui.mdi-command-00 
net btn-y input.0.btn-y => halui.mdi-command-01 
net btn-b input.0.btn-b => halui.mdi-command-02
#- Later: Z-probe (A button)
